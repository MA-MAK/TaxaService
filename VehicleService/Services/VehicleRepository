using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using MongoDB.Driver;



public class VehicleRepository
{
    private readonly List<Vehicle> _vehicles = new List<Vehicle>();

    private readonly IMongoCollection<Vehicle> _Collection;
    private readonly IMongoClient _client;

    private readonly IMongoDatabase _database;

    public VehicleRepository(IConfiguration configuration)
    {
        _client = new MongoClient(configuration["connectionString"] ?? "mongodb://localhost:27018");
        _database = _client.GetDatabase(configuration["databaseName"] ?? String.Empty);
        _vehicleCollection = _database.GetCollection<Vehicle>(configuration["collectionName"] ?? String.Empty);
    }



    public async Task<List<Vehicle>> GetAllVehicles()
    {
        return await Task.FromResult(_vehicles.ToList());
    }

    public async Task<Vehicle> GetVehicleById(int id)
    {
        return await Task.FromResult(_vehicles.FirstOrDefault(v => v.Id == id));
    }

    public async Task InsertVehicle(Vehicle vehicle)
    {
        _vehicles.Add(vehicle);
        await Task.CompletedTask;
    }

    public async Task UpdateVehicle(int id, Vehicle updatedVehicle)
    {
        var existingVehicle = _vehicles.FirstOrDefault(v => v.Id == id);

        if (existingVehicle != null)
        {
            existingVehicle.Brand = updatedVehicle.Brand;
            existingVehicle.Model = updatedVehicle.Model;
            existingVehicle.RegistrationNumber = updatedVehicle.RegistrationNumber;
            existingVehicle.Mileage = updatedVehicle.Mileage;
        }

        await Task.CompletedTask;
    }

    public async Task DeleteVehicle(int id)
    {
        var existingVehicle = _vehicles.FirstOrDefault(v => v.Id == id);
        if (existingVehicle != null)
        {
            _vehicles.Remove(existingVehicle);
        }

        await Task.CompletedTask;
    }
}
